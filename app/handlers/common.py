# app/handlers/common.py
"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""

from aiogram import types
from aiogram.fsm.context import FSMContext

from app.utils.constants import START_TEXT, HELP_TEXT, CUSTOM_BUTTONS, LAYOUT_CUSTOM_212_BUTTON
from app.keyboards.reply import create_custom_keyboard

from app.utils.logger import setup_logger

logger = setup_logger(__name__)

async def send_message_with_keyboard(message: types.Message, text: str, keyboard=None, parse_mode="HTML"):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π HTML"""
    try:
        if not text:
            logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            text = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"

        return await message.answer(text, parse_mode=parse_mode, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await send_message_with_keyboard(message, START_TEXT, create_custom_keyboard(CUSTOM_BUTTONS, LAYOUT_CUSTOM_212_BUTTON))

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
async def help_handler(message: types.Message):
    await send_message_with_keyboard(message, HELP_TEXT,parse_mode="HTML")


