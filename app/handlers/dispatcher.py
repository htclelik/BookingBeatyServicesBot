# dispatcher.py
# from functools import partial
from aiogram import Dispatcher, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state

from app.handlers.ai_assistant.ai_response_handler import process_ai_question, start_ai_assistant_session_handler
from app.handlers.booking.process_calendar_date_time import handle_date_selection, \
    handle_time_selection, handle_confirm_date, handle_calendar_navigation, handle_calendar_button, handle_confirm_time, \
    handle_create_event_calendar
# from app.handlers.booking.process_email_client import process_user_email
from app.handlers.booking.process_name_client import start_booking, process_user_name  # , process_user_name
from app.handlers.booking.process_phone_client import process_user_phone
# from app.handlers.booking.process_phone_client import process_user_phone
from app.handlers.booking.process_selected_master_services import handle_master_selection, \
    handle_service_selection, handle_confirm_services
from app.handlers.common import start_handler, help_handler
from app.handlers.gift import gift_handler
from app.handlers.info import info_handler, master_info_handler
from app.handlers.navigation import universal_back_handler, universal_cancel_handler, universal_menu_callback
from app.states.booking_states import BookingStates
from app.states.conversation_states import ConversationStates
from app.utils.constants import ASSISTANT_START_COMMAND, BACK_BUTTON_MENU_CALLBACK, MENU_BUTTON_TEXT, ASSISTANT_START_BUTTON_TEXT, CANCEL_TEXT, CANCEL_CALLBACK, HELP_BUTTON_TEXT, START_CALLBACK, \
    HELP_CALLBACK
from app.utils.logger import setup_logger

logger = setup_logger(__name__)
router = Router()



def setup_dispatcher(dp: Dispatcher): #bot: Bot
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""

    # üìå –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    router.message.register(start_handler, Command(START_CALLBACK))
    router.message.register(help_handler, Command(HELP_CALLBACK))
    router.message.register(help_handler, F.text == HELP_BUTTON_TEXT)

    router.message.register(universal_cancel_handler, F.text.casefold() == CANCEL_TEXT.casefold(), StateFilter(ConversationStates.waiting_for_question))
    router.message.register(universal_cancel_handler, Command(CANCEL_CALLBACK), StateFilter(ConversationStates.waiting_for_question))
    logger.info(
        f"AI Assistant: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç '{CANCEL_TEXT}' –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {ConversationStates.waiting_for_question.state}.")
    router.callback_query.register(universal_back_handler, F.data == "back", StateFilter("*"))
    router.callback_query.register(universal_back_handler, F.text == "üîô–ù–∞–∑–∞–¥", StateFilter("*"))

    # üí¨ü§ñ –û–±—â–µ–Ω–∏–µ —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    # router.message.register(universal_cancel_handler, F.data == "cancel", StateFilter("*"))
    router.message.register(start_ai_assistant_session_handler, StateFilter(default_state), Command(ASSISTANT_START_COMMAND))
    router.message.register(start_ai_assistant_session_handler, StateFilter(default_state), F.text == ASSISTANT_START_BUTTON_TEXT)
    router.message.register(start_ai_assistant_session_handler, StateFilter(default_state), F.text == ASSISTANT_START_BUTTON_TEXT, ~F.text.startswith('/'),)
    router.message.register(process_ai_question, StateFilter(ConversationStates.waiting_for_question),F.text, ~Command("cancel"), ~(F.text.casefold() == CANCEL_TEXT.casefold())
                            )
    logger.info(
        f"AI Assistant: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {ConversationStates.waiting_for_question.state}.")


    # ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    router.message.register(info_handler, Command("info"))
    router.message.register(info_handler, F.text == "‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å:üë©‚Äçü¶∞üßîüèª‚Äç‚ôÇÔ∏è–ú–∞—Å—Ç–µ—Ä–∞, üõ†Ô∏èüíÖüíá‚Äç‚ôÇÔ∏èüë®‚Äçüíª–£—Å–ª—É–≥–∏")
    router.callback_query.register(master_info_handler, F.data.startswith("master_"))

    # üìÜ –ó–∞–ø–∏—Å—å (–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
    router.message.register(start_booking, Command("book"))
    router.message.register(start_booking, F.text == "üìÜ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è")


    router.callback_query.register(universal_menu_callback, F.data == BACK_BUTTON_MENU_CALLBACK)
    router.message.register(process_user_name, StateFilter(BookingStates.waiting_for_name_client))
    router.message.register(process_user_phone, StateFilter(BookingStates.waiting_for_phone_client))
    # router.message.register(process_user_email, StateFilter(BookingStates.waiting_for_email_client))

    # üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    router.callback_query.register(handle_master_selection, F.data.startswith("booking_master_"))
    router.callback_query.register(handle_service_selection, F.data.startswith("service||"))
    router.callback_query.register(handle_confirm_services, F.data == "confirm_services")

    router.callback_query.register(handle_date_selection, F.data.startswith("date_"))
    router.callback_query.register(handle_calendar_navigation, F.data.in_(["prev", "next"]))
    router.callback_query.register(handle_calendar_button, Command("calendar"))

    router.callback_query.register(handle_confirm_date, F.data.startswith("confirm_date_"))
    router.callback_query.register(handle_time_selection, F.data.startswith("time_"))
    router.callback_query.register(handle_confirm_time, F.data.startswith("confirm_time_"))
    router.callback_query.register(
        handle_create_event_calendar,  # –ü—Ä–æ—Å—Ç–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        F.data == "create_final_appointment"
    )

    # üéÅ –ê–∫—Ü–∏–∏
    router.message.register(gift_handler, Command("gift"))
    router.message.register(gift_handler, F.text == "üéÅ–ê–∫—Ü–∏–∏, –ü–æ–¥–∞—Ä–∫–∏")

    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    dp.include_router(router)
