
import asyncio
import logging
import sys # –î–æ–±–∞–≤—å sys –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ stdout

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
from bot_instance import bot # <<<--- –ò–º–ø–æ—Ä—Ç –æ–±—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
from aiogram import Dispatcher, Bot
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç BOT_TOKEN –æ—Ç—Å—é–¥–∞, –±–µ—Ä–µ–º –∏–∑ bot_instance
# import config # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫? –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.
from app.handlers.dispatcher import setup_dispatcher
# <<<--- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
from app.scheduler_setup import scheduler, schedule_reminders_from_sheet
# ----------------------------------
from app.utils.logger import setup_logger

logger = setup_logger(__name__)


async def set_default_commands(bot_instance: Bot): # –ü—Ä–∏–Ω–∏–º–∞–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    commands = [
        BotCommand(command="start", description="üèÅ–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        # BotCommand(command="assistant", description="üí¨–û–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"),
        # BotCommand(command="info", description="‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å:üë©‚Äçü¶∞üßîüèª‚Äç‚ôÇÔ∏è–ú–∞—Å—Ç–µ—Ä–∞, üõ†Ô∏èüíÖüíá‚Äç‚ôÇÔ∏èüë®‚Äçüíª–£—Å–ª—É–≥–∏"),
        # BotCommand(command="book", description="üìÜ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è"),
        # BotCommand(command="gift", description="üéÅ–ê–∫—Ü–∏–∏, –ü–æ–¥–∞—Ä–∫–∏"),
        BotCommand(command="help", description="üõü–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É"),
        # –£–±–µ—Ä–∏ cancel, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ –∏–ª–∏ –∑–∞–º–µ–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã FSM
        BotCommand(command="cancel", description="üö´–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
    ]
    await bot_instance.set_my_commands(commands)


async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO, stream=sys.stdout,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s') # –î–æ–±–∞–≤–∏–º —Ñ–æ—Ä–º–∞—Ç
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ø–µ—Ä–µ–¥–∞–µ–º bot –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –µ–≥–æ –æ–∂–∏–¥–∞—é—Ç)
    setup_dispatcher(dp) # <<<--- –£–±—Ä–∞–ª bot –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç.–∫. –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ bot_instance
    await set_default_commands(bot) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bot

    # --- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler...")
        scheduler.start()
        logger.info("APScheduler –∑–∞–ø—É—â–µ–Ω.")
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        await asyncio.sleep(1)
        await schedule_reminders_from_sheet()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á APScheduler: {e}", exc_info=True)
    # ---------------------------

    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if scheduler.running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            scheduler.shutdown()
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–í—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞ (KeyboardInterrupt/SystemExit)")
    except Exception as e:
         logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio.run(main): {e}", exc_info=True)