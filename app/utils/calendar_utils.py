# app/utils/calendar_utils.py

from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from app.database.local_mini_db import DEFAULT_SESSION_DURATION
from app.keyboards.calendar_kb import create_calendar_keyboard
from app.states.booking_states import BookingStates
from app.utils.available_dates import get_available_dates
from app.utils.available_times import get_available_times
from app.utils.data_utils import get_calendar_id_for_master, get_master_by_id, get_work_hours
from app.utils.formmaters import russian_name_month
from app.utils.logger import setup_logger

logger = setup_logger(__name__)


async def get_calendar_data(state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    logger.info("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ get_calendar_data...")
    current_state = await state.get_state()
    logger.info(f"Current state: {current_state}")
    user_data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ year/month –∏–ª–∏ —Ç–µ–∫—É—â–∏–µ
    year = user_data.get('current_year', datetime.now().year)
    logger.info(f"Current year: {year}")

    month = user_data.get('current_month', datetime.now().month)
    logger.info(f"Current month: {month}")

    master_id = user_data.get("master_id")
    logger.info(f"Master ID: {master_id}")
    calendar_id = get_calendar_id_for_master(master_id)
    logger.info(f"Calendar ID: {calendar_id}")

    try:
        available_dates, fully_booked_dates = get_available_dates(
            year=year,
            month=month,
            master_id=master_id,
            calendar_id=calendar_id
        )
        return year, month, available_dates, fully_booked_dates
    except Exception as e:
        logger.error(f"Calendar data error: {e}")
        return None

async def get_time_calendar_data(state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logger.info("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ get_time_calendar_data...")

    current_state = await state.get_state()
    logger.info(f"Current state: {current_state}")

    user_data = await state.get_data()
    master_id = user_data.get("master_id")
    logger.info(f"Master ID: {master_id}")

    calendar_id = get_calendar_id_for_master(master_id)
    logger.info(f"Calendar ID: {calendar_id}")

    confirm_date = user_data.get("date")
    logger.info(f"Confirm date: {confirm_date}")
    if confirm_date is None:
        logger.error("–î–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏–µ confirm_date —Ä–∞–≤–Ω–æ None")
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
        return None

    master_info = get_master_by_id(master_id)
    work_start_hour, work_end_hour = get_work_hours(master_info)

    try:
        available_times = get_available_times(
            date_str=confirm_date,
            calendar_id=calendar_id,
            work_start_hour=work_start_hour,
            work_end_hour=work_end_hour,
            service_duration=DEFAULT_SESSION_DURATION
        )
        return available_times
    except Exception as e:
        logger.error(f"Time calendar data error: {e}")
        return None


async def update_calendar_display(callback_query: CallbackQuery, state: FSMContext, year=None, month=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {year}, {month}")
    current_state = await state.get_state()
    logger.info(f"Current state: {current_state}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ year –∏ month –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if year is None or month is None:
            user_data = await state.get_data()
            year = user_data.get('current_year', datetime.now().year)
            month = user_data.get('current_month', datetime.now().month)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_data = await get_calendar_data(state)
        if not calendar_data:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è", show_alert=True)
            return False

        year, month, available_dates, fully_booked_dates = calendar_data
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {available_dates}, –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã–µ: {fully_booked_dates}")

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        keyboard = create_calendar_keyboard(year, month, available_dates, fully_booked_dates)
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        await callback_query.message.edit_text(
            f"üìÖ {russian_name_month[month]} {year}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=keyboard
        )

        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        await state.set_state(BookingStates.waiting_for_date)
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return False
